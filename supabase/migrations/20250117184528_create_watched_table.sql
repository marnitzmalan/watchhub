-- Create watched table
CREATE TABLE IF NOT EXISTS watched (
                                       id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       user_id UUID NOT NULL,
                                       movie_id BIGINT NOT NULL,
                                       title TEXT NOT NULL,
                                       poster_path TEXT,
                                       release_date DATE,
                                       vote_average NUMERIC(3, 1),
    watched_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc' :: text, NOW()) NOT NULL,
    CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES auth.users(id) ON DELETE CASCADE
    );

-- Create index on user_id for faster queries
CREATE INDEX idx_watched_user_id ON watched(user_id);

-- Create unique constraint to prevent duplicate entries
CREATE UNIQUE INDEX idx_watched_user_movie ON watched(user_id, movie_id);

-- Enable Row Level Security
ALTER TABLE watched ENABLE ROW LEVEL SECURITY;

-- Create policy to allow users to see only their own watched items
CREATE POLICY "Users can view their own watched items" ON watched FOR
SELECT
    USING (
    auth.uid() = user_id
    );

-- Create policy to allow users to insert their own watched items
CREATE POLICY "Users can insert their own watched items" ON watched FOR INSERT WITH CHECK (
  auth.uid() = user_id
);

-- Create policy to allow users to update their own watched items
CREATE POLICY "Users can update their own watched items" ON watched FOR
UPDATE
    USING (
    auth.uid() = user_id
    );

-- Create policy to allow users to delete their own watched items
CREATE POLICY "Users can delete their own watched items" ON watched FOR DELETE USING (
  auth.uid() = user_id
);