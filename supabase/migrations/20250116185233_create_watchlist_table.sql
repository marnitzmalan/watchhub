-- Create watchlist table
CREATE TABLE IF NOT EXISTS watchlist (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL,
  movie_id BIGINT NOT NULL,
  title TEXT NOT NULL,
  poster_path TEXT,
  release_date DATE,
  vote_average NUMERIC(3, 1),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc' :: text, NOW()) NOT NULL,
  CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Create index on user_id for faster queries
CREATE INDEX idx_watchlist_user_id ON watchlist(user_id);

-- Create unique constraint to prevent duplicate entries
CREATE UNIQUE INDEX idx_watchlist_user_movie ON watchlist(user_id, movie_id);

-- Enable Row Level Security
ALTER TABLE
  watchlist ENABLE ROW LEVEL SECURITY;

-- Create policy to allow users to see only their own watchlist items
CREATE POLICY "Users can view their own watchlist items" ON watchlist FOR
SELECT
  USING (
    auth.uid() = user_id
  );

-- Create policy to allow users to insert their own watchlist items
CREATE POLICY "Users can insert their own watchlist items" ON watchlist FOR INSERT WITH CHECK (
  auth.uid() = user_id
);

-- Create policy to allow users to update their own watchlist items
CREATE POLICY "Users can update their own watchlist items" ON watchlist FOR
UPDATE
  USING (
    auth.uid() = user_id
  );

-- Create policy to allow users to delete their own watchlist items
CREATE POLICY "Users can delete their own watchlist items" ON watchlist FOR DELETE USING (
  auth.uid() = user_id
);
